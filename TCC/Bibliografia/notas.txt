O gerenciamento de recursos é a parte central de um sistema distribuído. Note que gerenciamento de recursos é, tradicionalmente, um problema do sistema operacional. Gerenciamento de recursos num sistema distribuído difere de um sistema centralizado num caminho fundamental. sistemas centralizados sempre têm tabelas as quais dão completo e atualizado status da informação sobre todos os recursos gerenciados; distribuídos não. O problema de gerenciar recursos sem ter a precisa informação do estado global é muito difícil. O ambiente em grade introduz cinco problemas de gerenciamento de recursos:

problema acontece porque muitas aplicações tem necessitades de recursos os quais podem ser satisfeitos apenas usando recursos simultaneamente em vários domínios. Autonomia de domínios e a possibilidade de falha durante alocação introduz a necessidade de mecanismos especializados para alocação multipla de recursos

Em ordem para validar nossas idéias, AppMan foi implementado como uma versão simplificada do GRAND. Implementado em java para obter portabilidade. Usa ferramenta JavaCC para implementar a GRID-ADL analisador sintaxe e interpretador. O ambiente AppMan usa o serviço provido pelo EXEHDA middleware que libera monitoramento e execução remota. AppMan implementa o básico das principais características do GRAND, incluindo submissão de tarefa distribuída e monitoramento de aplicação dando retorno ao usuário. Uma instância do AppMan e do ISAM/EXEHDA é necessário estar presente em cada nó da grade. Qualquer máquina pode submeter ou rodar tarefas. Usuários precisam submeter arquivos de entradas (descrição) o qual é analisado. O grafo de aplicação é feito em memória e o \emph{Application Manager é inicializado. Então o AM instancia os \emph{Submission Manager} e distribui alguns sub-grafos para o SMs. Arquivos de entrada e o executável são recuperados pelo web server. Na versão atual o AppMan necessita que usuários indiquem as maquinas onde os SMs irão executar. Com está simplificação, um novo SM é instanciado para cada aplicação em cada máquina especificada. Após criar o SMs, o AM determina sub-grafos para cada SM. Os SMs reportam para o AM o progresso das tarefas. Cada SM, independentemente, verifica a lista de máquina disponíveis e escolhe onde executar usando um algoritmo \emph{round-robin} \ref{Tanenbaum1995} apropriado. Então um TM é instanciado, criando um tarefa remota e monitorando ela até que esta tarefa esteja completa. Então cada SM recupera a informação atualizada sobre os nós avaliados através do EXEHDA. Cada SM escolhe onde esta tarefa irá rodar e instancia TMs para alocar a tarefa remota.

Página 20 da tese da Kayser consta no que a tese pretender ajudar
Página 52 da tese da Kayser fala da taxonomia
Página 56 da tese da Kayser comentando sobre gerenciamento de recursos entre grades.
Página 90 da tese da Kayser com uma imagem explicativa do modelo GRAND

Este capítulo apresenta alguns experimentos computacionais para avaliar como o número de tarefas afetam carga de uma máquina de submissão e como submissões centralizadas e distribuídas afetam máquinas de submissão. Nosso principais objetivos são: mostrar que uma hierarquia de máquinas de submissão, ex. submissão distribuída, é uma importante alternativa em um ambiente de grade; chegar como podemos tirar proveito de um esquema de submissão distribuído comparado a um centralizado. 

RESUMO DO QUE É ISAM:
O projeto ISAM (Infra-estrutura de Suporte às Aplicações Móveis) como mostra a figura (inserir figura) procura fornecer uma infra-estrutura para construção e execução de aplicações pervasivas. O ambiente pervasivo é composto por três abstrações básicas; EXEHDAcell que é a área de atuação da EXEHDAbase, EXEHDAbase onde todos os serviços providos pelo ambiente ISAM estão concentrados e EXEHDAnode representando todos dispositivos que estão executando aplicações no ambiente.


O PBS é uma nova suite de ferramentas de software que realiza o crescimento necessário para uma flexível, conectado, ambiente de processamento batch multi-plataforma. O típico sistema de enfileiramento batch escalona tarefas para execução usando uma conjunto de controle de filas.

